<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>求知若饥， 虚心若愚</title>
  <subtitle>Stay hungry， Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="JeanCHhhh.github.io/"/>
  <updated>2017-08-18T13:51:15.378Z</updated>
  <id>JeanCHhhh.github.io/</id>
  
  <author>
    <name>JeanCHhhh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同上下文中的this值</title>
    <link href="JeanCHhhh.github.io/2017/08/18/%E4%B8%8D%E5%90%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84this%E5%80%BC/"/>
    <id>JeanCHhhh.github.io/2017/08/18/不同上下文中的this值/</id>
    <published>2017-08-17T16:00:00.000Z</published>
    <updated>2017-08-18T13:51:15.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>注意：函数this的值，是在<strong>函数被调用</strong>时确定的，而不是在函数定义的时候。因为this的取值是执行上下文环境的一部分，而每一次调用函数，都会产生一个新的执行上下文环境。</p>
</blockquote>
<p>因此不同上下文中的this值大致可以分为以下四种情况:</p>
<h3 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h3><p>当函数作为构造函数被调用时，那么函数中的this就指向其构造的实例对象。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/8FliCf1GEf.png?imageslim" alt="example_1"></p>
<blockquote>
<p>注意：当构造函数不使用new操作符而是<strong>直接调用</strong>时，this的值是window。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/agD6m6Je6F.png?imageslim" alt="example_2"></p>
<hr>
<h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h3><p>当函数作为一个对象的属性，即方法，被调用时，函数中的this指向改对象。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/EaAakLCdmE.png?imageslim" alt="example_3"></p>
<blockquote>
<p>注意：当方法赋值给另一个变量时，其this的指向不再是原来的对象。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/a582fKh823.png?imageslim" alt="example_4"><br><br>如上，方法fn赋值给了fn1。当执行函数fn1时，fn并没有作为obj的一个属性被调用，那么this的值就是window。</p>
<hr>
<h3 id="3-调用call-apply方法"><a href="#3-调用call-apply方法" class="headerlink" title="3. 调用call / apply方法"></a>3. 调用call / apply方法</h3><p>当一个函数调用了call或apply方法时，函数中this的值就改变为<strong>传入对象</strong>的值。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/ff6Hm83KIa.png?imageslim" alt="example_5"><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/D0EF1iDe8i.png?imageslim" alt="example_6"></p>
<hr>
<h3 id="4-全局环境-amp-调用普通函数"><a href="#4-全局环境-amp-调用普通函数" class="headerlink" title="4. 全局环境 &amp; 调用普通函数"></a>4. 全局环境 &amp; 调用普通函数</h3><p>首先在全局上下文中引用this时，很明显this指向window。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/5bJ1k3H357.png?imageslim" alt="example_7"><br><br>同样，普通函数在调用时，其中的this也指向window，如上面的例子。<br></p>
<blockquote>
<p>注意：如果一个函数嵌套在一个方法内，那么该函数仍然视为普通函数。在调用时，自然this的值还是window。<br></p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/KmAaB25BK5.png?imageslim" alt="example_8"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：函数this的值，是在&lt;strong&gt;函数被调用&lt;/strong&gt;时确定的，而不是在函数定义的时候。因为this的取值是执行上下文环境的一部分，而每一次调用函数，都会产生一个新的执行上下文环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
