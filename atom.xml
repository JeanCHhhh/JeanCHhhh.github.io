<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>求知若饥， 虚心若愚</title>
  <subtitle>Stay hungry， Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="JeanCHhhh.github.io/"/>
  <updated>2017-09-04T14:19:07.036Z</updated>
  <id>JeanCHhhh.github.io/</id>
  
  <author>
    <name>JeanCHhhh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6学习笔记：Proxy</title>
    <link href="JeanCHhhh.github.io/2017/09/04/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9AProxy/"/>
    <id>JeanCHhhh.github.io/2017/09/04/ES6学习笔记：Proxy/</id>
    <published>2017-09-03T16:00:00.000Z</published>
    <updated>2017-09-04T14:19:07.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Proxy 用于修改某些操作的默认行为，可以理解成在目标对象之前增加一层“拦截”，外界对该对象的访问都必须通过这层拦截。因此 Proxy 提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 原意是代理，在ES6中的可由它来“代理”某些操作，所以可以译为“代理器”。<br></p>
<p>ES6原生提供Proxy构造函数，用来生成Proxy实例。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</div></pre></td></tr></table></figure></p>
<p>Proxy 对象的所有用法都是上面这种形式，不同的只是 handler 参数的写法。其中 target 参数表示所要拦截的目标对象，handler 参数是用来设定拦截行为的对象。下面是一个简单的例子。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">    get: funciton(target, key) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'jean'</span>;</div><div class="line">    &#125;,</div><div class="line">    set: funciton(target, key, value) &#123;</div><div class="line">        target[key] = value;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">proxy.name <span class="comment">// 'jean'</span></div><div class="line">proxy.name = <span class="string">'jack'</span>;</div><div class="line">proxy.name <span class="comment">// 'jack'</span></div></pre></td></tr></table></figure></p>
<p>以上代码对一个空对象架设了一层拦截，重定义了属性的读取（get）和设置（set）行为。Proxy 实际上重载了点运算符。<br></p>
<blockquote>
<p>应注意：如果 handler 没有设置任何拦截行为，那就等同于直接通向原对象。</p>
</blockquote>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</div><div class="line">proxy.name = <span class="string">'jean'</span>;</div><div class="line">target.name <span class="comment">// 'jean'</span></div></pre></td></tr></table></figure>
<p>Proxy 实例可以作为其他对象的原型对象。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'jean'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(proxy);</div><div class="line">obj.name <span class="comment">// 'jean'</span></div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Proxy-实例方法"><a href="#Proxy-实例方法" class="headerlink" title="Proxy 实例方法"></a>Proxy 实例方法</h3><h4 id="get（）"><a href="#get（）" class="headerlink" title="get（）"></a>get（）</h4><p> get 方法用于拦截某个属性的读取操作。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    name: <span class="string">'jean'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(preson, &#123;</div><div class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, property</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> target) &#123;</div><div class="line">            <span class="keyword">return</span> target[key];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"Property: "</span> + property + <span class="string">" does not exist."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">proxy.name <span class="comment">// 'jean'</span></div><div class="line">proxy.age <span class="comment">// 抛出错误</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，如果访问目标对象不存在的属性就会抛出一个错误告知该属性不存在。如果没有架设该拦截函数，访问不存在的属性，通常只会返回 undefined。<br></p>
<h5 id="get-方法可以继承"><a href="#get-方法可以继承" class="headerlink" title="get 方法可以继承"></a>get 方法可以继承</h5><p>正如前面所说，Proxy 对象可以作为其他对象的原型，因此 get 方法可以继承给对象目标。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">    get(target, property, receiver) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'get '</span> + property);</div><div class="line">        <span class="keyword">return</span> target[property];</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(proxy);</div><div class="line">obj.name <span class="comment">// 'get name'</span></div></pre></td></tr></table></figure></p>
<h4 id="实现链式操作"><a href="#实现链式操作" class="headerlink" title="实现链式操作"></a>实现链式操作</h4><p>利用 Proxy，可以将读取属性的操作转变为执行某个函数，从而实现属性的链式操作。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chain = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> funList = [];</div><div class="line">        <span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">            get(chainObj, fnName) &#123;</div><div class="line">                <span class="keyword">if</span> (fnName === <span class="string">'get'</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> funList.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">val, fn</span>) </span>&#123;</div><div class="line">                        <span class="keyword">return</span> fn(val);</div><div class="line">                    &#125;,value);</div><div class="line">                &#125;</div><div class="line">                funList.push(<span class="built_in">window</span>[fnName]);</div><div class="line">                <span class="keyword">return</span> proxy;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> proxy;</div><div class="line">    &#125;</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="keyword">var</span> double = <span class="function"><span class="params">n</span> =&gt;</span> n*<span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> pow = <span class="function"><span class="params">n</span> =&gt;</span> n*n;</div><div class="line"></div><div class="line">chain(<span class="number">2</span>).double.pow.get; <span class="comment">// 16</span></div></pre></td></tr></table></figure></p>
<h4 id="生成-dom"><a href="#生成-dom" class="headerlink" title="生成 dom"></a>生成 dom</h4><p>利用 get 拦截，可以实现以生成各种 DOM 节点的通用函数 createDom。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createDom = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</div><div class="line">    get(target, property) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">attr = &#123;&#125;, ...children</span>) </span>&#123;</div><div class="line">            <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(property);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">of</span> <span class="built_in">Object</span>,keys(attrs)) &#123;</div><div class="line">                el.setAttribute(prop, attrs[prop]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> child <span class="keyword">of</span> children) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> child === <span class="string">'string'</span>) &#123;</div><div class="line">                    child = <span class="built_in">document</span>.createTextNode(child);</div><div class="line">                &#125;</div><div class="line">                el.appendChild(child);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> el;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>应注意：如果一个属性不可写并且不可配置，该属性不能被代理，通过 Proxy 对象访问该对象会报错。</p>
</blockquote>
<hr>
<h3 id="set（）"><a href="#set（）" class="headerlink" title="set（）"></a>set（）</h3><p>set 方法用来拦截某个属性的赋值操作。<br></p>
<h4 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h4><p>除了上面例子中利用 set 方法实现数据绑定，还可以利用 set 存值函数在对属性赋值的过程中进行数据验证。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> validator = &#123;</div><div class="line">    set(target, prop, value) &#123;</div><div class="line">        <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger(value)) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'The age is not an integer'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (value &gt; <span class="number">150</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">RangeError</span>(<span class="string">'The age seems invalid'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        target[prop] = value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, validator);</div><div class="line">person.age = <span class="number">24</span>;</div><div class="line">person.age <span class="comment">// 24</span></div><div class="line">person.age = <span class="number">200</span> <span class="comment">// 报错</span></div><div class="line">person.age = <span class="string">'jean'</span> <span class="comment">// 报错</span></div></pre></td></tr></table></figure></p>
<h4 id="设置内部属性"><a href="#设置内部属性" class="headerlink" title="设置内部属性"></a>设置内部属性</h4><p>通常我们把第一个字符为下划线的属性名定位对象的内部属性，以此来表示这些属性不应该被外部使用。结合 get 和 set 方法，可以实现内部属性不被外部读写。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handler = &#123;</div><div class="line">    get(target, key) &#123;</div><div class="line">        internal(key, <span class="string">'get'</span>);</div><div class="line">        <span class="keyword">return</span> target[key];</div><div class="line">    &#125;,</div><div class="line">    set(target, key, value) &#123;</div><div class="line">        internal(key, <span class="string">'set'</span>);</div><div class="line">        target[key] = value;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">internal</span> (<span class="params">key, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">'_'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private "<span class="subst">$&#123;key&#125;</span>" property`</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler);</div><div class="line">proxy._name <span class="comment">// 报错</span></div><div class="line">proxy._name = <span class="string">'jean; // 报错</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>应注意：和 get 方法同样，如果目标对象的某个属性不可写也不可配置，那么 set 不能改变该属性，只能返回同样的值，否则会报错。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;Proxy 用于修改某些操作的默认行为，可以理解成在目标对象之前增加一层“拦截”，外界对该对象的访问都必须通过这层拦截。因此 Proxy 提
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数组的方法</title>
    <link href="JeanCHhhh.github.io/2017/08/26/%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>JeanCHhhh.github.io/2017/08/26/数组的方法/</id>
    <published>2017-08-25T16:00:00.000Z</published>
    <updated>2017-09-04T14:25:01.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组的检测方法"><a href="#数组的检测方法" class="headerlink" title="数组的检测方法"></a>数组的检测方法</h3><h4 id="ES5的isArray函数"><a href="#ES5的isArray函数" class="headerlink" title="ES5的isArray函数"></a>ES5的isArray函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(obj);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>缺点：<strong>IE8</strong>之前的版本并不支持该方法</p>
</blockquote>
<h4 id="对象自身的constructor属性"><a href="#对象自身的constructor属性" class="headerlink" title="对象自身的constructor属性"></a>对象自身的constructor属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> obj !== <span class="string">'undefined'</span> &amp;&amp; obj &amp;&amp; obj.constructor === <span class="built_in">Array</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="instanceof操作符"><a href="#instanceof操作符" class="headerlink" title="instanceof操作符"></a>instanceof操作符</h4><p>instanceof操作符用于判断某个构造函数的<strong>prototype</strong>属性是否在另一个被检测对象的原型链上，即判断instanceof<strong>前面的对象</strong>是否是<strong>后面的类或对象</strong>的<strong>实例</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>缺点：constructor和instanceof在多个frame中来回执行时，<strong>跨frame</strong>实例化的对象彼此间并<strong>不共享原型链</strong>，因此这两种方法会失效。</p>
</blockquote>
<h4 id="对象原生的toString方法"><a href="#对象原生的toString方法" class="headerlink" title="对象原生的toString方法"></a>对象原生的toString方法</h4><p>Object.prototype.toString的行为：取得对象一个内部属性[[Class]]，根据该属性返回形如“[object Array]”的字符串。因此可利用call访问到对象的内部属性[[Class]]，把类型检测转换为字符串的比较。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">isArray = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) == <span class="string">"[object Array]"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>通过判断是否是拥有join方法以及length长度属性的对象来检测数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">"object"</span> &amp;&amp;</div><div class="line">       (<span class="string">"join"</span> <span class="keyword">in</span> arg &amp;&amp; <span class="keyword">typeof</span> arg.join === <span class="string">"funciton"</span>) &amp;&amp;</div><div class="line">       (<span class="string">"length"</span> <span class="keyword">in</span> arg &amp;&amp; <span class="keyword">typeof</span> arg.length === <span class="string">"number"</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="最佳检测方法"><a href="#最佳检测方法" class="headerlink" title="最佳检测方法"></a>最佳检测方法</h4><p>不管Array.isArray方法是否能够使用，都可以回到原生对象的toString检测方法上。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArray = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.isArray;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> objectToStringFn = <span class="built_in">Object</span>.prototype.toString,</div><div class="line">        arrayToStringResult = objectToStringFn.call([]);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> objectToStringFn.call(subjcet) === arrayToStringResult;</div><div class="line">    &#125;;</div><div class="line">&#125;());</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="数组的sort-方法"><a href="#数组的sort-方法" class="headerlink" title="数组的sort()方法"></a>数组的sort()方法</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>sort()方法对数组的元素进行排序，并<strong>返回原数组</strong>。默认情况下，没有传递参数时，对数组项进行升序排列。另外方法可接受一个比较函数compareFunction作为参数。<br></p>
<ul>
<li>compareFunction(a, b)返回值小于0：a &lt; b</li>
<li>compareFunction(a, b)返回值等于0：a = b</li>
<li>compareFunction(a, b)返回值大于0：a &gt; b<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 升序排列</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ascSort</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &amp;lt; b) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 降序排列</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">descSort</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &amp;lt; b) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="更简单的比较函数"><a href="#更简单的比较函数" class="headerlink" title="更简单的比较函数"></a>更简单的比较函数</h4><p>对于数字类型或valueof（）方法返回数字类型的对象类型，可使用更简单的比较函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 升序排列</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ascSort</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 降序排列</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">descSort</span> （<span class="title">a</span>, <span class="title">b</span>）</span>&#123;</div><div class="line">    <span class="keyword">return</span> b-a;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="对象数组的单属性排列"><a href="#对象数组的单属性排列" class="headerlink" title="对象数组的单属性排列"></a>对象数组的单属性排列</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据desc参数值，对数组按指定的property属性进行升降序排列</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectSort</span> (<span class="params">property, desc</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (desc) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">a ,b</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (a[property] &gt; b[property]) ? <span class="number">-1</span> : (a[property] &lt; b[property]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (a[property] &lt; b[property]) ? <span class="number">-1</span> : (a[property] &gt; b[property]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="对象数组的多属性排列"><a href="#对象数组的多属性排列" class="headerlink" title="对象数组的多属性排列"></a>对象数组的多属性排列</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicSort</span>(<span class="params">property</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sortOrder = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (property[<span class="number">0</span>] === <span class="string">"-"</span>) &#123;</div><div class="line">        sortOrder = <span class="number">-1</span>;</div><div class="line">        property = property.substr(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> funciton (a, b) &#123;</div><div class="line">        <span class="keyword">var</span> result = (a[property] &lt; b[property]) ? <span class="number">-1</span> : (a[property] &gt; b[property]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> result * sortOrder;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dynamicSortMultiple</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> props = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">return</span> funciton (obj1, obj2) &#123;</div><div class="line">        <span class="keyword">var</span> i=<span class="number">0</span>, result=<span class="number">0</span>, numberOfProperties = props.length;</div><div class="line">        <span class="keyword">while</span> (result === <span class="number">0</span> &amp;&amp; i &lt; numberOfProperties) &#123;</div><div class="line">            result = dynamicSort(props[i])(obj1, obj2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数组的检测方法&quot;&gt;&lt;a href=&quot;#数组的检测方法&quot; class=&quot;headerlink&quot; title=&quot;数组的检测方法&quot;&gt;&lt;/a&gt;数组的检测方法&lt;/h3&gt;&lt;h4 id=&quot;ES5的isArray函数&quot;&gt;&lt;a href=&quot;#ES5的isArray函数&quot; class
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式：单例模式</title>
    <link href="JeanCHhhh.github.io/2017/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>JeanCHhhh.github.io/2017/08/21/设计模式：单例模式/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2017-09-04T14:22:05.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在单例模式的核心结构中只包含一个称谓单例的特殊类。通过单例模式，保证<strong>一个类</strong>只有<strong>一个实例</strong>，并且在提供一个<strong>全局的接口</strong>。<br></p>
<hr>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p>用一个变量来<strong>标志</strong>当前是否已经为某个类创建过对象，如果是，则在下一次获取该类实例的时候，直接返回之前创建的对象。最简单的方式是通过创建对象字面量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.instance = <span class="literal">null</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</div><div class="line">        <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'Jack'</span>);</div><div class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'John'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>缺点：上述方法创建实例对象只能通过getIanstance函数；同时使用者必须知道这是个单例类，而不是通过以往的new方式来创建对象。</p>
</blockquote>
<hr>
<h3 id="透明的实现方法"><a href="#透明的实现方法" class="headerlink" title="透明的实现方法"></a>透明的实现方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> instance;</div><div class="line">    <span class="keyword">var</span> getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">        obj.name = name;</div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!instance) &#123;</div><div class="line">            instance = getInstance(name);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Singleton;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Singleton(<span class="string">'Jack'</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Singleton(<span class="string">'John'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a === b);</div></pre></td></tr></table></figure>
<p>实际上这样的单例模式构造函数同时负责了实例对象的<strong>创建、初始化以及保证只有一个实例对象</strong>。</p>
<blockquote>
<p> 缺点：有可能导致模块之间的强耦合。</p>
</blockquote>
<hr>
<h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>惰性单例是指只在需要的时候才创建实例对象。如文中一开始的例子，只在调用 <strong>Singleton.getInstance</strong> 的时候才创建 <strong>instance</strong>。在实际应用中，如果我们需要创建页面中唯一的iframe或script标签用于跨域请求数据，就可以通过惰性单例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CreateIframe = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> iframe;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!iframe) &#123;</div><div class="line">            iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">            iframe.style.display = <span class="string">'none'</span>;</div><div class="line">            <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> iframe;</div><div class="line">    &#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>但是这样的实现方法<strong>复用性</strong>不高，如果需要创建的是script标签时，就要重新编写对象创建部分的代码。因此为实现方法的通用性，可以把管理单例的逻辑 (即保证实例对象的唯一) <strong>抽离</strong>出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 保证唯一</span></div><div class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> res || (res = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 创建、初始化</span></div><div class="line"><span class="keyword">var</span> createSingleScript = Singleton(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">    script.style.display = <span class="string">'none'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(script);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在需要请求数据的时候调用</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn-fetechData'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> singleScript = creatSingleScript();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;在单例模式的核心结构中只包含一个称谓单例的特殊类。通过单例模式，保证&lt;strong&gt;一个类&lt;/strong&gt;只有&lt;strong&gt;一个实例&lt;/
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>原型的理解</title>
    <link href="JeanCHhhh.github.io/2017/08/19/%E5%8E%9F%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>JeanCHhhh.github.io/2017/08/19/原型的理解/</id>
    <published>2017-08-18T16:00:00.000Z</published>
    <updated>2017-09-04T14:26:01.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>我们创建的每一个函数都有一个<strong>prototype</strong>属性，这个属性的值指向一个<strong>对象</strong>，这个对象的作用是包含可以由特定类型的所有实例共享的<strong>属性和方法</strong>。那么可以理解为：prototype指向的是调用构造函数所创建实例的原型对象。<br></p>
<p>同时，在默认情况下该原型对象只会获得一个<strong>constructor</strong>属性，指向<strong>prototype</strong>属性所在函数。而原型对象的其他方法都是从Object继承而来，这一点会在后面详述。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/D0Dhk93leh.png?imageslim" alt="mark"><br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/mBKjIHJ2kg.png?imageslim" alt="mark"><br><br>当使用构造函数创建实例对象时，该实例的内部会包含一个指针[[Prototype]]，可以通过<strong>proto</strong>属性访问。<br></p>
<blockquote>
<p>应注意：__proto__ 属性联系的是构造函数创建的<strong>实例</strong>与构造函数的<strong>原型对象</strong>之间的关系，即 person1.__proto__ === Person.prototype 。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/0GiLe1DB0B.png?imageslim" alt="mark"></p>
<hr>
<h3 id="隐式原型"><a href="#隐式原型" class="headerlink" title="隐式原型"></a>隐式原型</h3><h4 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a><strong>proto</strong>属性</h4><p>上面提到了两种原型属性，其中<strong>每个函数</strong>都有 prototype 属性。而另一个 __proto__ 属性，可以称为隐式原型。我们可以通过控制台直接查看<strong>proto</strong>属性。<br><br> <img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/7LahD0jCjl.png?imageslim" alt="mark"><br><br>从上图我们可以发现 obj.__proto__ 和 Object.prototype 属性是一样。正如前面所说，obj 这个实例对象实际上是由 Object 函数创建的，因此 obj.__proto__ === Object.prototype 。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/ifmD3HcKEi.png?imageslim" alt="mark"><br></p>
<h4 id="构造函数原型对象的proto"><a href="#构造函数原型对象的proto" class="headerlink" title="构造函数原型对象的proto"></a>构造函数原型对象的<strong>proto</strong></h4><p>前面提到了prototype指向的是一个对象，这个对象同样需要构造函数创建。所以构造函数的原型对象实际上也是由<strong>Object</strong>创建的，如下图，Foo.prototype的<strong>proto</strong>指向的是Object.prototype。这也就说明了为什么原型对象的其他方法是从Object继承而来的。<br></p>
<blockquote>
<p>应注意：虽然每个函数都有prototype属性，但并不是所有对象都有 __proto__ 属性。有一个特例：Object.prototype 的 __proto__ 指向 <strong>null</strong>。<br></p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/LicFH34gf9.png?imageslim" alt="mark"><br></p>
<h4 id="构造函数的proto"><a href="#构造函数的proto" class="headerlink" title="构造函数的proto"></a>构造函数的<strong>proto</strong></h4><p>也就是说除了特例情况，所有对象都有 __proto__ ，而函数也是对象。我们通常创建函数是通过函数声明或函数表达式这两种方式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而实际上还可以通过new Function创建。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span> (<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"return a+b;"</span>)</div></pre></td></tr></table></figure></p>
<p>所以下图中自定义构造函数 Foo 是由 Function 创建，其<strong>proto</strong>就指向了Function.prototype。同样的，构造函数Object以及构造函数Function也都是函数，都由Function创建，因此<strong>proto</strong>都是指向Function.prototype。<br></p>
<blockquote>
<p>应注意：和前面提到的自定义构造函数的原型对象Foo.prototype一样的道理，Function.prototype的__proto同样指向的是Object.prototype。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/9f5fG0Gf92.png?imageslim" alt="mark"><br></p>
<hr>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>JavaScript中的继承是通过原型链来体现的。当访问一个对象的属性时，现在该对象的基本属性中查找，如果没有再沿着__proto__这条链向上找。由上文可以知道，原型链是有限的，最终指向null。我们可以通过hasOwnProperty方法来判断属性是否是继承而来的。<br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h3&gt;&lt;p&gt;我们创建的每一个函数都有一个&lt;strong&gt;prototype&lt;/strong&gt;属性，这个属性的值指向一个&lt;strong&gt;对
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>不同上下文中的this值</title>
    <link href="JeanCHhhh.github.io/2017/08/18/%E4%B8%8D%E5%90%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84this%E5%80%BC/"/>
    <id>JeanCHhhh.github.io/2017/08/18/不同上下文中的this值/</id>
    <published>2017-08-17T16:00:00.000Z</published>
    <updated>2017-08-19T08:08:36.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>注意：函数this的值，是在<strong>函数被调用</strong>时确定的，而不是在函数定义的时候。因为this的取值是执行上下文环境的一部分，而每一次调用函数，都会产生一个新的执行上下文环境。</p>
</blockquote>
<p>因此不同上下文中的this值大致可以分为以下四种情况:</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>当函数作为构造函数被调用时，那么函数中的this就指向其构造的实例对象。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/8FliCf1GEf.png?imageslim" alt="example_1"></p>
<blockquote>
<p>注意：当构造函数不使用new操作符而是<strong>直接调用</strong>时，this的值是window。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/agD6m6Je6F.png?imageslim" alt="example_2"></p>
<hr>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>当函数作为一个对象的属性，即方法，被调用时，函数中的this指向改对象。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/EaAakLCdmE.png?imageslim" alt="example_3"></p>
<blockquote>
<p>注意：当方法赋值给另一个变量时，其this的指向不再是原来的对象。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/a582fKh823.png?imageslim" alt="example_4"><br><br>如上，方法fn赋值给了fn1。当执行函数fn1时，fn并没有作为obj的一个属性被调用，那么this的值就是window。</p>
<hr>
<h3 id="调用call-apply方法"><a href="#调用call-apply方法" class="headerlink" title="调用call / apply方法"></a>调用call / apply方法</h3><p>当一个函数调用了call或apply方法时，函数中this的值就改变为<strong>传入对象</strong>的值。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/ff6Hm83KIa.png?imageslim" alt="example_5"><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/D0EF1iDe8i.png?imageslim" alt="example_6"></p>
<hr>
<h3 id="全局环境-amp-调用普通函数"><a href="#全局环境-amp-调用普通函数" class="headerlink" title="全局环境 &amp; 调用普通函数"></a>全局环境 &amp; 调用普通函数</h3><p>首先在全局上下文中引用this时，很明显this指向window。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/5bJ1k3H357.png?imageslim" alt="example_7"><br><br>同样，普通函数在调用时，其中的this也指向window，如上面的例子。<br></p>
<blockquote>
<p>注意：如果一个函数嵌套在一个方法内，那么该函数仍然视为普通函数。在调用时，自然this的值还是window。<br></p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/KmAaB25BK5.png?imageslim" alt="example_8"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：函数this的值，是在&lt;strong&gt;函数被调用&lt;/strong&gt;时确定的，而不是在函数定义的时候。因为this的取值是执行上下文环境的一部分，而每一次调用函数，都会产生一个新的执行上下文环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
