<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>求知若饥， 虚心若愚</title>
  <subtitle>Stay hungry， Stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="JeanCHhhh.github.io/"/>
  <updated>2017-08-21T06:44:43.772Z</updated>
  <id>JeanCHhhh.github.io/</id>
  
  <author>
    <name>JeanCHhhh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式：单例模式</title>
    <link href="JeanCHhhh.github.io/2017/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>JeanCHhhh.github.io/2017/08/21/设计模式：单例模式/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2017-08-21T06:44:43.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在单例模式的核心结构中只包含一个称谓单例的特殊类。通过单例模式，保证<strong>一个类</strong>只有<strong>一个实例</strong>，并且在提供一个<strong>全局的接口</strong>。<br></p>
<hr>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p>用一个变量来<strong>标志</strong>当前是否已经为某个类创建过对象，如果是，则在下一次获取该类实例的时候，直接返回之前创建的对象。最简单的方式是通过创建对象字面量。</p>
<pre>
var Singleton = function() {
    this.name = name;
    this.instance = null;
};

Singleton.getInstance = function(name) {
    if (!this.instance) {
        this.instance = new Singleton(name);
    }
    return this.instance;
};

var a = Singleton.getInstance('Jack');
var b = Singleton.getInstance('John');

console.log(a === b); // true
</pre>

<blockquote>
<p>缺点：上述方法创建实例对象只能通过getIanstance函数；同时使用者必须知道这是个单例类，而不是通过以往的new方式来创建对象。</p>
</blockquote>
<hr>
<h3 id="透明的实现方法"><a href="#透明的实现方法" class="headerlink" title="透明的实现方法"></a>透明的实现方法</h3><pre>
var Singleton = (function() {
    var instance;
    var getInstance = function(name) {
        var obj = new Object();
        obj.name = name;
        return obj;
    }
    var Singleton = function(name) {
        if (!instance) {
            instance = getInstance(name);
        }
        return instance;
    }
    return Singleton;
})();

var a = new Singleton('Jack');
var b = new Singleton('John');

console.log(a === b);
</pre>
实际上这样的单例模式构造函数**同时**负责了实例对象的**创建**、**初始化**以及保证**只有一个**实例对象。<br>

> 缺点：有可能导致模块之间的强耦合。

- - -
### 惰性单例
惰性单例是指只在需要的时候才创建实例对象。如文中一开始的例子，只在调用 **Singleton.getInstance** 的时候才创建 **instance**。在实际应用中，如果我们需要创建页面中唯一的iframe或script标签用于跨域请求数据，就可以通过惰性单例。<br>
<pre>
var CreateIframe = (function() {
    var iframe;
    return function() {
        if(!iframe) {
            iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
        }
        return iframe;
    };
})();
</pre>
但是这样的实现方法**复用性**不高，如果需要创建的是script标签时，就要重新编写对象创建部分的代码。因此为实现方法的通用性，可以把管理单例的逻辑 (即保证实例对象的唯一) **抽离**出来。<br>
<pre>
// 保证唯一
var Singleton = function(fn) {
    var res;
    return function() {
        return res || (res = fn.apply(this, arguments));
    };
};

// 创建、初始化
var createSingleScript = Singleton(function() {
    script = document.createElement('script');
    script.style.display = 'none';
    document.body.appendChild(script);
});

// 在需要请求数据的时候调用
document.getElementById('btn-fetechData').onclick = function() {
    var singleScript = creatSingleScript();
};
</pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;在单例模式的核心结构中只包含一个称谓单例的特殊类。通过单例模式，保证&lt;strong&gt;一个类&lt;/strong&gt;只有&lt;strong&gt;一个实例&lt;/
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>原型的理解</title>
    <link href="JeanCHhhh.github.io/2017/08/19/%E5%8E%9F%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>JeanCHhhh.github.io/2017/08/19/原型的理解/</id>
    <published>2017-08-18T16:00:00.000Z</published>
    <updated>2017-08-19T08:09:13.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>我们创建的每一个函数都有一个<strong>prototype</strong>属性，这个属性的值指向一个<strong>对象</strong>，这个对象的作用是包含可以由特定类型的所有实例共享的<strong>属性和方法</strong>。那么可以理解为：prototype指向的是调用构造函数所创建实例的原型对象。<br></p>
<p>同时，在默认情况下该原型对象只会获得一个<strong>constructor</strong>属性，指向<strong>prototype</strong>属性所在函数。而原型对象的其他方法都是从Object继承而来，这一点会在后面详述。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/D0Dhk93leh.png?imageslim" alt="mark"><br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/mBKjIHJ2kg.png?imageslim" alt="mark"><br><br>当使用构造函数创建实例对象时，该实例的内部会包含一个指针[[Prototype]]，可以通过<strong>proto</strong>属性访问。<br></p>
<blockquote>
<p>应注意：__proto__ 属性联系的是构造函数创建的<strong>实例</strong>与构造函数的<strong>原型对象</strong>之间的关系，即 person1.__proto__ === Person.prototype 。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/0GiLe1DB0B.png?imageslim" alt="mark"></p>
<hr>
<h3 id="隐式原型"><a href="#隐式原型" class="headerlink" title="隐式原型"></a>隐式原型</h3><h5 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a><strong>proto</strong>属性</h5><p>上面提到了两种原型属性，其中<strong>每个函数</strong>都有 prototype 属性。而另一个 __proto__ 属性，可以称为隐式原型。我们可以通过控制台直接查看<strong>proto</strong>属性。<br><br> <img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/7LahD0jCjl.png?imageslim" alt="mark"><br><br>从上图我们可以发现 obj.__proto__ 和 Object.prototype 属性是一样。正如前面所说，obj 这个实例对象实际上是由 Object 函数创建的，因此 obj.__proto__ === Object.prototype 。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/ifmD3HcKEi.png?imageslim" alt="mark"><br></p>
<h5 id="构造函数原型对象的proto"><a href="#构造函数原型对象的proto" class="headerlink" title="构造函数原型对象的proto"></a>构造函数原型对象的<strong>proto</strong></h5><p>前面提到了prototype指向的是一个对象，这个对象同样需要构造函数创建。所以构造函数的原型对象实际上也是由<strong>Object</strong>创建的，如下图，Foo.prototype的<strong>proto</strong>指向的是Object.prototype。这也就说明了为什么原型对象的其他方法是从Object继承而来的。<br></p>
<blockquote>
<p>应注意：虽然每个函数都有prototype属性，但并不是所有对象都有 __proto__ 属性。有一个特例：Object.prototype 的 __proto__ 指向 <strong>null</strong>。<br></p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/LicFH34gf9.png?imageslim" alt="mark"><br></p>
<h5 id="构造函数的proto"><a href="#构造函数的proto" class="headerlink" title="构造函数的proto"></a>构造函数的<strong>proto</strong></h5><p>也就是说除了特例情况，所有对象都有 __proto__ ，而函数也是对象。我们通常创建函数是通过函数声明或函数表达式这两种方式。<br></p>
<p><pre>// 函数声明<br>function sum (a, b) {<br>    return a+b;<br>}</pre></p>
<p>// 函数表达式<br>var sum = function (a, b) {<br>    return a+b;<br>}<br><br>而实际上还可以通过new Function创建。</p>
<p><pre>var sum = new Function (“a”, “b”, “return a+b;”)</pre><br>所以下图中自定义构造函数 Foo 是由 Function 创建，其<strong>proto</strong>就指向了Function.prototype。同样的，构造函数Object以及构造函数Function也都是函数，都由Function创建，因此<strong>proto</strong>都是指向Function.prototype。<br></p>
<blockquote>
<p>应注意：和前面提到的自定义构造函数的原型对象Foo.prototype一样的道理，Function.prototype的__proto同样指向的是Object.prototype。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170819/9f5fG0Gf92.png?imageslim" alt="mark"><br></p>
<hr>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>JavaScript中的继承是通过原型链来体现的。当访问一个对象的属性时，现在该对象的基本属性中查找，如果没有再沿着__proto__这条链向上找。由上文可以知道，原型链是有限的，最终指向null。我们可以通过hasOwnProperty方法来判断属性是否是继承而来的。<br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h3&gt;&lt;p&gt;我们创建的每一个函数都有一个&lt;strong&gt;prototype&lt;/strong&gt;属性，这个属性的值指向一个&lt;strong&gt;对
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>不同上下文中的this值</title>
    <link href="JeanCHhhh.github.io/2017/08/18/%E4%B8%8D%E5%90%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84this%E5%80%BC/"/>
    <id>JeanCHhhh.github.io/2017/08/18/不同上下文中的this值/</id>
    <published>2017-08-17T16:00:00.000Z</published>
    <updated>2017-08-19T08:08:36.104Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>注意：函数this的值，是在<strong>函数被调用</strong>时确定的，而不是在函数定义的时候。因为this的取值是执行上下文环境的一部分，而每一次调用函数，都会产生一个新的执行上下文环境。</p>
</blockquote>
<p>因此不同上下文中的this值大致可以分为以下四种情况:</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>当函数作为构造函数被调用时，那么函数中的this就指向其构造的实例对象。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/8FliCf1GEf.png?imageslim" alt="example_1"></p>
<blockquote>
<p>注意：当构造函数不使用new操作符而是<strong>直接调用</strong>时，this的值是window。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/agD6m6Je6F.png?imageslim" alt="example_2"></p>
<hr>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>当函数作为一个对象的属性，即方法，被调用时，函数中的this指向改对象。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/EaAakLCdmE.png?imageslim" alt="example_3"></p>
<blockquote>
<p>注意：当方法赋值给另一个变量时，其this的指向不再是原来的对象。</p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/a582fKh823.png?imageslim" alt="example_4"><br><br>如上，方法fn赋值给了fn1。当执行函数fn1时，fn并没有作为obj的一个属性被调用，那么this的值就是window。</p>
<hr>
<h3 id="调用call-apply方法"><a href="#调用call-apply方法" class="headerlink" title="调用call / apply方法"></a>调用call / apply方法</h3><p>当一个函数调用了call或apply方法时，函数中this的值就改变为<strong>传入对象</strong>的值。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/ff6Hm83KIa.png?imageslim" alt="example_5"><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/D0EF1iDe8i.png?imageslim" alt="example_6"></p>
<hr>
<h3 id="全局环境-amp-调用普通函数"><a href="#全局环境-amp-调用普通函数" class="headerlink" title="全局环境 &amp; 调用普通函数"></a>全局环境 &amp; 调用普通函数</h3><p>首先在全局上下文中引用this时，很明显this指向window。<br><br><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/5bJ1k3H357.png?imageslim" alt="example_7"><br><br>同样，普通函数在调用时，其中的this也指向window，如上面的例子。<br></p>
<blockquote>
<p>注意：如果一个函数嵌套在一个方法内，那么该函数仍然视为普通函数。在调用时，自然this的值还是window。<br></p>
</blockquote>
<p><img src="http://ouvt9tvkb.bkt.clouddn.com/blog/170818/KmAaB25BK5.png?imageslim" alt="example_8"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注意：函数this的值，是在&lt;strong&gt;函数被调用&lt;/strong&gt;时确定的，而不是在函数定义的时候。因为this的取值是执行上下文环境的一部分，而每一次调用函数，都会产生一个新的执行上下文环境。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此
    
    </summary>
    
      <category term="JavaScript" scheme="JeanCHhhh.github.io/categories/JavaScript/"/>
    
    
      <category term="学习笔记" scheme="JeanCHhhh.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
